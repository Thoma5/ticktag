import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import {
  TicketDetail, TicketDetailTag, TicketDetailTransient,
  TicketDetailUser, TicketDetailRelated, TicketDetailTimeCategory,
  TicketDetailAssTag
} from '../ticket-detail';
import * as imm from 'immutable';

@Component({
  selector: 'tt-ticket-core',
  templateUrl: './ticket-core.component.html',
  styleUrls: ['./ticket-core.component.scss']
})
export class TicketCoreComponent implements OnChanges {
  @Input() open: boolean;
  // TODO no output
  @Input() title: string;
  @Output() titleChange = new EventEmitter<string>();
  @Input() description: string;
  @Output() descriptionChange = new EventEmitter<string>();
  @Input() storypoints: number;
  @Output() storypointsChange = new EventEmitter<number>();
  @Input() tags: imm.List<TicketDetailTransient<TicketDetailTag>>;
  private tagIds: imm.List<{ id: string, transient: boolean }>;  // generated by tags
  @Output() tagAdd = new EventEmitter<string>();
  @Output() tagRemove = new EventEmitter<string>();
  @Input() initialEstimatedTime: number;
  // TODO no output
  @Input() currentEstimatedTime: number;
  // TODO no output
  @Input() dueDate: number;
  // TODO no output
  @Input() subtickets: imm.List<TicketDetailRelated>;
  // TODO no output

  // Readonly
  @Input() ticket: TicketDetail;
  @Input() number: number;
  @Input() creator: TicketDetailUser;
  @Input() createTime: number;
  @Input() allTicketTags: imm.Map<string, TicketDetailTag>;
  @Input() allTimeCategories: imm.Map<string, TicketDetailTimeCategory>;
  @Input() allAssignmentTags: imm.Map<string, TicketDetailAssTag>;

  editingTitle: boolean = false;
  editingDescription: boolean = false;

  ngOnChanges(changes: SimpleChanges): void {
    if ('tags' in changes) {
      this.tagIds = this.tags.map(tag => ({ id: tag.value.id, transient: tag.transient })).toList();
    }
  }
}
